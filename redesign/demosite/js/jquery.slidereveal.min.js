/*! slidereveal - v1.1.2 - 2016-05-16
 * https://github.com/nnattawat/slidereveal
 * Copyright (c) 2016 Nattawat Nonsung; Licensed MIT */
! function (a) {
    var b = function (a, b) {
            var c = a.css("padding-" + b);
            return c ? +c.substring(0, c.length - 2) : 0
        },
        c = function (a) {
            var c = b(a, "left"),
                d = b(a, "right");
            return a.width() + c + d + "px"
        },
        d = function (b, c) {
            var d = {
                width: 250,
                push: !0,
                position: "left",
                speed: 300,
                trigger: void 0,
                autoEscape: !0,
                show: function () {},
                shown: function () {},
                hidden: function () {},
                hide: function () {},
                top: 0,
                overlay: !1,
                zIndex: 1049,
                overlayColor: "rgba(0,0,0,0.5)"
            };
            this.setting = a.extend(d, c), this.element = b, this.init()
        };
    a.extend(d.prototype, {
        init: function () {
            var b = this,
                d = this.setting,
                e = this.element,
                f = "all ease " + d.speed + "ms";
            e.css({
                position: "fixed",
                width: d.width,
                transition: f,
                height: "100%",
                top: d.top
            }).css(d.position, "-" + c(e)), d.overlay && (e.css("z-index", d.zIndex), b.overlayElement = a("<div class='slide-reveal-overlay'></div>").hide().css({
                position: "fixed",
                top: 0,
                left: 0,
                height: "100%",
                width: "100%",
                "z-index": d.zIndex - 1,
                "background-color": d.overlayColor
            }).click(function () {
                b.hide()
            }), a("body").prepend(b.overlayElement)), e.data("slide-reveal", !1), d.push && a("body").css({
                position: "relative",
                "overflow-x": "hidden",
                transition: f,
                left: "0px"
            }), d.trigger && d.trigger.length > 0 && d.trigger.on("click.slideReveal", function () {
                e.data("slide-reveal") ? b.hide() : b.show()
            }), d.autoEscape && a(document).on("keydown.slideReveal", function (c) {
                0 === a("input:focus, textarea:focus").length && 27 === c.keyCode && e.data("slide-reveal") && b.hide()
            })
        },
        show: function (b) {
            var d = this.setting,
                e = this.element,
                f = this.overlayElement;
            (void 0 === b || b) && d.show(e), d.overlay && f.show(), e.css(d.position, "0px"), d.push && ("left" === d.position ? a("body").css("left", c(e)) : a("body").css("left", "-" + c(e))), e.data("slide-reveal", !0), (void 0 === b || b) && setTimeout(function () {
                d.shown(e)
            }, d.speed)
        },
        hide: function (b) {
            var d = this.setting,
                e = this.element,
                f = this.overlayElement;
            (void 0 === b || b) && d.hide(e), d.push && a("body").css("left", "0px"), e.css(d.position, "-" + c(e)), e.data("slide-reveal", !1), (void 0 === b || b) && setTimeout(function () {
                d.overlay && f.hide(), d.hidden(e)
            }, d.speed)
        },
        toggle: function (a) {
            var b = this.element;
            b.data("slide-reveal") ? this.hide(a) : this.show(a)
        },
        remove: function () {
            this.element.removeData("slide-reveal-model"), this.setting.trigger && this.setting.trigger.length > 0 && this.setting.trigger.off(".slideReveal"), this.overlayElement && this.overlayElement.length > 0 && this.overlayElement.remove()
        }
    }), a.fn.slideReveal = function (b, c) {
        return void 0 !== b && "string" == typeof b ? this.each(function () {
            var d = a(this).data("slide-reveal-model");
            "show" === b ? d.show(c) : "hide" === b ? d.hide(c) : "toggle" === b && d.toggle(c)
        }) : this.each(function () {
            a(this).data("slide-reveal-model") && a(this).data("slide-reveal-model").remove(), a(this).data("slide-reveal-model", new d(a(this), b))
        }), this
    }
    
    
/*---------------------------
 Extend and Execute
----------------------------*/

    a.fn.reveal = function(options) {
        
        
        var defaults = {  
	    	animation: 'fadeAndPop', //fade, fadeAndPop, none
		    animationspeed: 300, //how fast animtions are
		    closeonbackgroundclick: true, //if you click background will modal close?
		    dismissmodalclass: 'close-reveal-modal' //the class of a button or element that will close an open modal
    	}; 
    	
        //Extend dem' options
        var options = a.extend({}, defaults, options); 
	
        return this.each(function() {
        
/*---------------------------
 Global Variables
----------------------------*/
        	var modal = $(this),
        		topMeasure  = parseInt(modal.css('top')),
				topOffset = modal.height() + topMeasure,
          		locked = false,
				modalBG = $('.reveal-modal-bg');

/*---------------------------
 Create Modal BG
----------------------------*/
			if(modalBG.length == 0) {
				modalBG = $('<div class="reveal-modal-bg" />').insertAfter(modal);
			}		    
     
/*---------------------------
 Open & Close Animations
----------------------------*/
			//Entrance Animations
			modal.bind('reveal:open', function () {
			  modalBG.unbind('click.modalEvent');
				$('.' + options.dismissmodalclass).unbind('click.modalEvent');
				if(!locked) {
					lockModal();
					if(options.animation == "fadeAndPop") {
						modal.css({'top': $(document).scrollTop()-topOffset, 'opacity' : 0, 'visibility' : 'visible'});
						modalBG.fadeIn(options.animationspeed/2);
						modal.delay(options.animationspeed/2).animate({
							"top": $(document).scrollTop()+topMeasure + 'px',
							"opacity" : 1
						}, options.animationspeed,unlockModal());					
					}
					if(options.animation == "fade") {
						modal.css({'opacity' : 0, 'visibility' : 'visible', 'top': $(document).scrollTop()+topMeasure});
						modalBG.fadeIn(options.animationspeed/2);
						modal.delay(options.animationspeed/2).animate({
							"opacity" : 1
						}, options.animationspeed,unlockModal());					
					} 
					if(options.animation == "none") {
						modal.css({'visibility' : 'visible', 'top':$(document).scrollTop()+topMeasure});
						modalBG.css({"display":"block"});	
						unlockModal()				
					}
				}
				modal.unbind('reveal:open');
			}); 	

			//Closing Animation
			modal.bind('reveal:close', function () {
			  if(!locked) {
					lockModal();
					if(options.animation == "fadeAndPop") {
						modalBG.delay(options.animationspeed).fadeOut(options.animationspeed);
						modal.animate({
							"top":  $(document).scrollTop()-topOffset + 'px',
							"opacity" : 0
						}, options.animationspeed/2, function() {
							modal.css({'top':topMeasure, 'opacity' : 1, 'visibility' : 'hidden'});
							unlockModal();
						});					
					}  	
					if(options.animation == "fade") {
						modalBG.delay(options.animationspeed).fadeOut(options.animationspeed);
						modal.animate({
							"opacity" : 0
						}, options.animationspeed, function() {
							modal.css({'opacity' : 1, 'visibility' : 'hidden', 'top' : topMeasure});
							unlockModal();
						});					
					}  	
					if(options.animation == "none") {
						modal.css({'visibility' : 'hidden', 'top' : topMeasure});
						modalBG.css({'display' : 'none'});	
					}		
				}
				modal.unbind('reveal:close');
			});     
   	
/*---------------------------
 Open and add Closing Listeners
----------------------------*/
        	//Open Modal Immediately
    	modal.trigger('reveal:open')
			
			//Close Modal Listeners
			var closeButton = $('.' + options.dismissmodalclass).bind('click.modalEvent', function () {
			  modal.trigger('reveal:close')
			});
			
			if(options.closeonbackgroundclick) {
				modalBG.css({"cursor":"pointer"})
				modalBG.bind('click.modalEvent', function () {
				  modal.trigger('reveal:close')
				});
			}
			$('body').keyup(function(e) {
        		if(e.which===27){ modal.trigger('reveal:close'); } // 27 is the keycode for the Escape key
			});
			
			
/*---------------------------
 Animations Locks
----------------------------*/
			function unlockModal() { 
				locked = false;
			}
			function lockModal() {
				locked = true;
			}	
			
        });//each call
    }//orbit plugin call
}(jQuery);
